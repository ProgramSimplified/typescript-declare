// commonjs 库声明文件

/// <reference path="extend.d.ts" />
/// <reference path="utils.d.ts" />

// 外界非默认形式（解构形式）的引用，放置在命名空间
declare namespace MyLib_AnyName {
  // 变量
  const version: string;
  function add(a: number, b: number): number
  function subtract(a: number, b: number): number

  // 类型
  type MyString = string
  interface MyObject {
    x: number
    y: string
  }

  // 依赖的外部类型随着命名空间一起导出吧 \(^o^)/~
  interface ExtendObject extends Extend {}
  interface request extends Utils.request {}
}

// 默认导出的变量
// ⚠️ 注意! 函数的声明尽量写成声明形式, 而不是表达式:
// declare const MyLib_AnyName: (a: number, b: number) => number;
// 因为函数才有重载, 所以写成表达式形式, 就不能使用同名的命名空间了.
declare function MyLib_AnyName(a: number, b: number): number

// export as namespace MyLib_AnyName // 专为 umd 库设置的语句, umd 库则该条语句不可缺少

export = MyLib_AnyName
